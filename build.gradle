plugins {
    id 'fabric-loom' version "${loom_version}"
    id 'maven-publish'
}

repositories {
    maven {
        name = 'Fabric'
        url = 'https://maven.fabricmc.net/'
    }
    mavenCentral()
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}


loom {
    mods {
        craftfunds {
            sourceSet sourceSets.main
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    
    // JSON library for PayPal API
    implementation 'com.google.code.gson:gson:2.10.1'
    
    // MySQL JDBC driver for database connectivity - using newer version
    implementation 'com.mysql:mysql-connector-j:8.4.0'
    include 'com.mysql:mysql-connector-j:8.4.0'
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}"}
    }
}

// Development server tasks
task downloadFabricServer {
    description = 'Downloads the Fabric server installer if not present'
    group = 'development server'
    
    doLast {
        def serverDir = file('dev-server')
        def fabricServerJar = new File(serverDir, 'fabric-server-launch.jar')
        
        if (!fabricServerJar.exists()) {
            serverDir.mkdirs()
            
            println 'Downloading Fabric server installer...'
            def installerJar = new File(serverDir, 'fabric-installer-0.11.2.jar')
            new URL('https://maven.fabricmc.net/net/fabricmc/fabric-installer/0.11.2/fabric-installer-0.11.2.jar').withInputStream { i ->
                installerJar.withOutputStream { it << i }
            }
            
            // Run the installer
            exec {
                workingDir serverDir
                commandLine 'java', '-jar', 'fabric-installer-0.11.2.jar', 'server', '-mcversion', '1.21', '-loader', '0.16.9', '-downloadMinecraft'
            }
            
            // Clean up installer
            installerJar.delete()
        }
    }
}

task copyModToServer(type: Copy, dependsOn: build) {
    description = 'Copies the built mod JAR to the development server mods folder'
    group = 'development server'
    
    from file('build/libs')
    into file('dev-server/mods')
    include '**/*.jar'
    exclude '**/*-sources.jar'
    exclude '**/*-dev.jar'
    
    doLast {
        println "Mod copied to dev-server/mods/"
    }
}

task cleanServerMods(type: Delete) {
    description = 'Cleans old mod versions from the server mods folder'
    group = 'development server'
    
    delete fileTree('dev-server/mods') {
        include "${project.archives_base_name}-*.jar"
    }
}

task deployMod(dependsOn: [cleanServerMods, copyModToServer]) {
    description = 'Clean build and deploy mod to development server'
    group = 'development server'
    
    doLast {
        println "Mod ${project.archives_base_name}-${project.mod_version}.jar deployed to development server"
    }
}

task startDevServer(dependsOn: downloadFabricServer) {
    description = 'Starts the development server with the mod'
    group = 'development server'
    
    doLast {
        exec {
            workingDir file('dev-server')
            commandLine 'java', '-Xmx2G', '-Xms1G', '-jar', 'fabric-server-mc.1.21-loader.0.16.9-launcher.0.11.2.jar', 'nogui'
        }
    }
}

// Make build automatically copy to server
build.finalizedBy(copyModToServer)

// configure the maven publication
publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}